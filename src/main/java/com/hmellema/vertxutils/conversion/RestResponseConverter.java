package com.hmellema.vertxutils.conversion;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.MultiMap;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.RoutingContext;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Converts a response type to a json response.
 * 
 * <p>The response Type should be auto-generated from the OpenAPI spec
 * to ensure responses follow the Api contract
 * 
 * @param <ResponseTypeT> Model type to convert to a json reponse
 */
@Slf4j
@RequiredArgsConstructor
public class RestResponseConverter<ResponseTypeT> {

  private static final int BAD_JSON_STATUS_CODE = 400;
  private static final String BAD_JSON_ERROR_MESSAGE = "Malformed Request";

  @NonNull
  private final ObjectMapper objectMapper;

  /**
   * Converts an ResponseTypeT object (from the OpenApi models) to a json 
   * vertx response.
   * Note: Calling this message will terminate the handler chain.
   * Note: Bad json responses will return an error with code BAD_JSON_STATUS_CODE
   * 
   * @param  outputObject Output object generated by Rest handler
   * @param  context Vert.x routing context
   */
  public void createResponse(
      final @NonNull ResponseTypeT outputObject,
      final @NonNull RoutingContext context
  ) {
    try {
      context.response().end(objectMapper.writeValueAsString(outputObject));
    } catch (JsonProcessingException exception) {
      log.error("Failed to process input data.", exception);
      returnMalformedRequestException(context);
    }
  }

  private void returnMalformedRequestException(
      final @NonNull RoutingContext context
  ) {
    context
      .response()
      .setStatusCode(BAD_JSON_STATUS_CODE)
      .setStatusMessage(BAD_JSON_ERROR_MESSAGE)
      .end();
  }
}
